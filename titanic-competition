{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:40.307869Z","iopub.execute_input":"2025-07-30T06:31:40.308752Z","iopub.status.idle":"2025-07-30T06:31:40.316938Z","shell.execute_reply.started":"2025-07-30T06:31:40.308720Z","shell.execute_reply":"2025-07-30T06:31:40.316022Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:41.585513Z","iopub.execute_input":"2025-07-30T06:31:41.585816Z","iopub.status.idle":"2025-07-30T06:31:41.590502Z","shell.execute_reply.started":"2025-07-30T06:31:41.585792Z","shell.execute_reply":"2025-07-30T06:31:41.589639Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"# Load the training and test datasets\ntrain_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n\n# Display first few rows of training data\ntrain_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:42.462575Z","iopub.execute_input":"2025-07-30T06:31:42.462879Z","iopub.status.idle":"2025-07-30T06:31:42.484663Z","shell.execute_reply.started":"2025-07-30T06:31:42.462858Z","shell.execute_reply":"2025-07-30T06:31:42.483865Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"# Basic info about training data\ntrain_df.info()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:43.887901Z","iopub.execute_input":"2025-07-30T06:31:43.888211Z","iopub.status.idle":"2025-07-30T06:31:43.900167Z","shell.execute_reply.started":"2025-07-30T06:31:43.888188Z","shell.execute_reply":"2025-07-30T06:31:43.899414Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"# Check for missing values\ntrain_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:45.512959Z","iopub.execute_input":"2025-07-30T06:31:45.513262Z","iopub.status.idle":"2025-07-30T06:31:45.521018Z","shell.execute_reply.started":"2025-07-30T06:31:45.513239Z","shell.execute_reply":"2025-07-30T06:31:45.519781Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"# Basic statistics of numeric columns\ntrain_df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:46.984518Z","iopub.execute_input":"2025-07-30T06:31:46.984882Z","iopub.status.idle":"2025-07-30T06:31:47.010169Z","shell.execute_reply.started":"2025-07-30T06:31:46.984860Z","shell.execute_reply":"2025-07-30T06:31:47.009282Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"# Drop unnecessary columns\ntrain_df = train_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Name', 'Ticket', 'Cabin'], axis=1)\n\n# Fill missing Age with median\ntrain_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())\ntest_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())\n\n# Fill missing Embarked values with mode\nX_train['Embarked'] = X_train['Embarked'].fillna(X_train['Embarked'].mode()[0])\nX_val['Embarked'] = X_val['Embarked'].fillna(X_val['Embarked'].mode()[0])\n\n# Fill missing Fare in test set with median\ntest_df['Fare'].fillna(test_df['Fare'].median())\n\n# Convert 'Sex' and 'Embarked' to numeric\ntrain_df['Sex'] = train_df['Sex'].map({'male': 0, 'female': 1})\ntest_df['Sex'] = test_df['Sex'].map({'male': 0, 'female': 1})\n\ntrain_df['Embarked'] = train_df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})\ntest_df['Embarked'] = test_df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:48.312887Z","iopub.execute_input":"2025-07-30T06:31:48.313168Z","iopub.status.idle":"2025-07-30T06:31:48.330254Z","shell.execute_reply.started":"2025-07-30T06:31:48.313149Z","shell.execute_reply":"2025-07-30T06:31:48.329369Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"# Split Features and Target","metadata":{}},{"cell_type":"code","source":"# Separate features (X) and target (y)\nX = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:50.609656Z","iopub.execute_input":"2025-07-30T06:31:50.610428Z","iopub.status.idle":"2025-07-30T06:31:50.615743Z","shell.execute_reply.started":"2025-07-30T06:31:50.610401Z","shell.execute_reply":"2025-07-30T06:31:50.614981Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"# Split Training and Validation Sets","metadata":{}},{"cell_type":"code","source":"# Split data: 80% training, 20% validation\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:31:52.320093Z","iopub.execute_input":"2025-07-30T06:31:52.320405Z","iopub.status.idle":"2025-07-30T06:31:52.327156Z","shell.execute_reply.started":"2025-07-30T06:31:52.320381Z","shell.execute_reply":"2025-07-30T06:31:52.326574Z"}},"outputs":[],"execution_count":29},{"cell_type":"markdown","source":"# Train the Model","metadata":{}},{"cell_type":"code","source":"# Check if any column in X_train has missing values\nX_train.isnull().sum()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:32:03.502991Z","iopub.execute_input":"2025-07-30T06:32:03.503282Z","iopub.status.idle":"2025-07-30T06:32:03.510897Z","shell.execute_reply.started":"2025-07-30T06:32:03.503264Z","shell.execute_reply":"2025-07-30T06:32:03.510111Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"Pclass      0\nSex         0\nAge         0\nSibSp       0\nParch       0\nFare        0\nEmbarked    2\ndtype: int64"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"# Fill missing Embarked values with mode\nX_train['Embarked'] = X_train['Embarked'].fillna(X_train['Embarked'].mode()[0])\nX_val['Embarked'] = X_val['Embarked'].fillna(X_val['Embarked'].mode()[0])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:32:11.219022Z","iopub.execute_input":"2025-07-30T06:32:11.219324Z","iopub.status.idle":"2025-07-30T06:32:11.225689Z","shell.execute_reply.started":"2025-07-30T06:32:11.219300Z","shell.execute_reply":"2025-07-30T06:32:11.224900Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"# Check if any column in X_train has missing values\nX_train.isnull().sum()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:32:17.410169Z","iopub.execute_input":"2025-07-30T06:32:17.410493Z","iopub.status.idle":"2025-07-30T06:32:17.417682Z","shell.execute_reply.started":"2025-07-30T06:32:17.410468Z","shell.execute_reply":"2025-07-30T06:32:17.416762Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"Pclass      0\nSex         0\nAge         0\nSibSp       0\nParch       0\nFare        0\nEmbarked    0\ndtype: int64"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"# Initialize and train the model\nmodel = LogisticRegression(max_iter=200)\nmodel.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:32:24.415082Z","iopub.execute_input":"2025-07-30T06:32:24.415394Z","iopub.status.idle":"2025-07-30T06:32:25.013798Z","shell.execute_reply.started":"2025-07-30T06:32:24.415338Z","shell.execute_reply":"2025-07-30T06:32:25.012391Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=200)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=200)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=200)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":35},{"cell_type":"markdown","source":"# Evaluate the Model","metadata":{}},{"cell_type":"code","source":"# Predict on validation set\ny_pred = model.predict(X_val)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_val, y_pred)\nprint(\"Validation Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:33:18.818970Z","iopub.execute_input":"2025-07-30T06:33:18.819855Z","iopub.status.idle":"2025-07-30T06:33:18.828813Z","shell.execute_reply.started":"2025-07-30T06:33:18.819820Z","shell.execute_reply":"2025-07-30T06:33:18.827888Z"}},"outputs":[{"name":"stdout","text":"Validation Accuracy: 0.7988826815642458\n","output_type":"stream"}],"execution_count":36},{"cell_type":"markdown","source":"#  Prepare Test Set","metadata":{}},{"cell_type":"code","source":"# Drop PassengerId from test set for predictions, but save it for submission\ntest_ids = test_df[\"PassengerId\"]\nX_test = test_df.drop(\"PassengerId\", axis=1)\n\n# Make sure there are no missing values\nX_test = X_test.fillna(X_test.median())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:33:58.605576Z","iopub.execute_input":"2025-07-30T06:33:58.605941Z","iopub.status.idle":"2025-07-30T06:33:58.615122Z","shell.execute_reply.started":"2025-07-30T06:33:58.605916Z","shell.execute_reply":"2025-07-30T06:33:58.614315Z"}},"outputs":[],"execution_count":37},{"cell_type":"markdown","source":"#  Predict on Test Set","metadata":{}},{"cell_type":"code","source":"# Predict survival on the test set\ntest_preds = model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:34:18.416629Z","iopub.execute_input":"2025-07-30T06:34:18.417007Z","iopub.status.idle":"2025-07-30T06:34:18.423710Z","shell.execute_reply.started":"2025-07-30T06:34:18.416985Z","shell.execute_reply":"2025-07-30T06:34:18.422651Z"}},"outputs":[],"execution_count":38},{"cell_type":"markdown","source":"# Create Submission File","metadata":{}},{"cell_type":"code","source":"# Create a DataFrame with predictions\nsubmission = pd.DataFrame({\n    \"PassengerId\": test_ids,\n    \"Survived\": test_preds\n})\n\n# Save to CSV\nsubmission.to_csv(\"submission.csv\", index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:35:52.956296Z","iopub.execute_input":"2025-07-30T06:35:52.956675Z","iopub.status.idle":"2025-07-30T06:35:52.964456Z","shell.execute_reply.started":"2025-07-30T06:35:52.956653Z","shell.execute_reply":"2025-07-30T06:35:52.963594Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"submission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T06:36:23.205999Z","iopub.execute_input":"2025-07-30T06:36:23.206343Z","iopub.status.idle":"2025-07-30T06:36:23.212613Z","shell.execute_reply.started":"2025-07-30T06:36:23.206315Z","shell.execute_reply":"2025-07-30T06:36:23.211754Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}